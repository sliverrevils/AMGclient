import Head from "next/head";
import Image from "next/image";
import { Inter, Roboto } from "next/font/google";
import AuthPage from "@/components/templates/AuthPage/AuthPage";
import { useEffect, useRef } from "react";
import { useDispatch } from "react-redux";
import axiosClient from "@/app/axiosClient";

import { IMainStyle, UserI } from "../types/types";
import { authCheck } from "@/app/usersClent";
import { logInRedux } from "@/redux/mainSlice";
import { useAuth } from "@/hooks/useAuth";
import { useSelector } from "react-redux";
import Loader from "@/components/elements/loader/Loader";
import MainPage from "@/components/templates/MainPage/MainPage";
import { setUsersRedux } from "@/redux/usersSlice";
import { setMainStyleRedux } from "@/redux/appSlice";

export default function Main() {
    const initFirst = useRef(true);
    const dispatch = useDispatch();

    const { loadingFullScreen, loading } = useSelector((state: any) => state.app);
    const isLogIn = useSelector((state: any) => !!state.main.user);

    useEffect(() => {
        if (initFirst.current) {
            initFirst.current = false;
            //ls mainStyle
            const lsMainStyle = localStorage.getItem("mainStyle") as IMainStyle;
            if (lsMainStyle) {
                dispatch(setMainStyleRedux(lsMainStyle));
            }
            //auth check
            authCheck().then((user) => {
                if (user) {
                    dispatch(logInRedux(user));
                }
            });
        }
    }, []);

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" type="image/svg" sizes="32x32" href="/img/logo.svg" />
            </Head>
            <Loader loading={loading} />

            {/* <button onClick={()=>toast()}>toast</button> */}
            {isLogIn ? <MainPage /> : <AuthPage />}
        </>
    );
}

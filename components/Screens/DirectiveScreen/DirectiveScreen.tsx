import { ElementRef, useCallback, useEffect, useMemo, useRef, useState } from "react";
import styles from "./direct.module.scss";
import { nanoid } from "@reduxjs/toolkit";
import { IChartPropListItem, IDirectHeader, IDirectInfoDoc, IDirectMembers, IDirectOffice, IDirectTable, ILogicCell, IOrgItem, IProtocolListItem, ISelectedStatsListItem, ITableStat, OfficeI, RaportTableInfoI, StatItemLogic, StatItemReady, TableStatisticListItemI, UserFullI, UserI } from "@/types/types";
import { daySec } from "@/utils/vars";
import { useSelector } from "react-redux";
import { StateReduxI } from "@/redux/store";
import DirectTable from "./DirectTable";
import Modal from "@/components/elements/Modal/Modal";
import useTableStatistics from "@/hooks/useTableStatistics";

import { ViewColumnsIcon, XCircleIcon, BuildingOffice2Icon, Cog6ToothIcon, ArrowLeftCircleIcon, ArrowRightCircleIcon, BarsArrowUpIcon, UserPlusIcon, UserMinusIcon, ArrowDownCircleIcon, CloudArrowDownIcon, TrashIcon, CloudArrowUpIcon, ArrowUpTrayIcon, DocumentArrowDownIcon, XMarkIcon } from "@heroicons/react/24/outline";
import { clearStatName, hexToRgba, rgbToHex, timeNumberToString, timeStrToNumber } from "@/utils/funcs";
import useUsers from "@/hooks/useUsers";
import Mission from "@/components/elements/Mission/Mission";
import Charts from "./Charts";
import { toast } from "react-toastify";
import useDirect from "@/hooks/useDirect";
import * as ExelJs from "exceljs";

const defaultHeaders: IDirectHeader[] = [
    {
        id: "baseHeaderID_1",
        title: "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞",
        color: "#6FD273",
    },
    {
        id: "baseHeaderID_2",
        title: "–ü–ª–∞–Ω/—Ñ–∞–∫—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –ø–µ—Ä–∏–æ–¥",
        color: "#6FD273",
    },
    {
        id: "baseHeaderID_3",
        title: "–°–æ—Å—Ç–æ—è–Ω–∏–µ",
        color: "#6FD273",
    },
    {
        id: "baseHeaderID_4",
        title: "–ö–≤–æ—Ç–∞ –Ω–∞ –±—É–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥",
        color: "#6FD273",
    },
    {
        id: "baseHeaderID_5",
        title: "–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –±—É–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥",
        color: "#6FD273",
    },
];

const memberPresenceCol = ["#B2B2B2", "#FFF545"];

export default function DirectiveScreen() {
    //LS LOAD
    // const loadedHeaders = JSON.parse(localStorage.getItem("dirHeaders") || "[]") as IDirectHeader[];
    // const loadedStatLogicsMap = new Map<string, ILogicCell[]>(Object.entries(JSON.parse(localStorage.getItem("statLogics") || "{}")));
    const loadedStatLogicsMap = new Map<string, ILogicCell[]>();

    //REFS
    const usersListRef = useRef<HTMLSelectElement | null>(null);

    //HOOKS
    const { getLatestTable, addingFilledField, statNameById } = useTableStatistics();
    const { userByID } = useUsers();
    const { getDirectSettings, saveHeaders, saveLogic, saveDirect, getProtocolList, getProtocolById, deleteProtocolById, getSelectedLists, saveSelectedList, deleteListById } = useDirect();

    //SELECTORS
    const { mainStyle } = useSelector((state: StateReduxI) => state.app);
    const { tableStatisticsList } = useSelector((state: StateReduxI) => state.stats);
    const { offices } = useSelector((state: StateReduxI) => state.org);
    const isAdmin = useSelector((state: any) => state.main.user?.role === "admin");
    const user: UserI = useSelector((state: any) => state.main.user);
    const { users }: { users: UserFullI[] } = useSelector((state: StateReduxI) => state.users);
    const { generalDirector } = useSelector((state: StateReduxI) => state.org);
    const fullOrgWithdata = useSelector((state: StateReduxI) => {
        const orgWithdata = state.org.offices
            .toSorted((off1, off2) => parseInt(off1.name) - parseInt(off2.name))
            .map((office) => {
                return {
                    ...office,
                    mainPattern: getLatestTable(office.mainPattern),
                    patterns: office.patterns.map((stat) => getLatestTable(stat)),
                    departments: office.departments
                        .toSorted((off1, off2) => parseInt(off1.name) - parseInt(off2.name))
                        .map((dep) => {
                            return {
                                ...dep,
                                mainPattern: getLatestTable(dep.mainPattern),
                                patterns: dep.patterns.map((stat) => getLatestTable(stat)),
                                sections: dep.sections
                                    .toSorted((off1, off2) => parseInt(off1.name) - parseInt(off2.name))
                                    .map((sec) => {
                                        return {
                                            ...sec,
                                            mainPattern: getLatestTable(sec.mainPattern),
                                            patterns: sec.patterns.map((stat) => getLatestTable(stat)).filter((stat) => !!stat),
                                            itemType: "section", // - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
                                        };
                                    }),
                                itemType: "department", // - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–ø –±–ª–æ–∫–∞
                            };
                        }),
                    itemType: "office", // - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ñ–∏—Å–∞
                };
            });

        return orgWithdata as IDirectOffice[];
    });

    // console.log(initOrgItems.filter((item) => item.itemType === "office"));

    //STATE
    const [isSavedProtocol, setIsSavedProtocol] = useState(false);
    const [mainStatus, setMainStatus] = useState<null | "new" | "archive">(isAdmin ? null : "archive");
    const [headers, setHeaders] = useState<IDirectHeader[]>(defaultHeaders);
    const [isShowEditHeaders, setIsShowEditHeaders] = useState(false);
    const [selectedHeader, setSelectedHeader] = useState(0);
    const [tabels, setTables] = useState<IDirectTable[]>([]);
    const [members, setMembers] = useState<IDirectMembers[]>([]);
    const [charts, setCharts] = useState<IChartPropListItem[]>([]);
    const INFO_INIT = {
        protocol: 0,
        date: new Date().getTime(),
        chairmanId: generalDirector,
        lastProtocol: 0,
        strategy: 0,
        directFP: 0,
        docs: 0,
    };
    const [info, setInfo] = useState<IDirectInfoDoc>(INFO_INIT);

    const [protocolList, setProtocolList] = useState<IProtocolListItem[]>([]);
    const [protocolSelectedId, setProtocolSelectedId] = useState(0);

    const [scrollPos, setScrollPos] = useState<number | null>(null);
    const saveScroll = () => {
        setScrollPos(window.scrollY);
    };
    const goToSavedScroll = () => {
        window.scrollTo(0, scrollPos as number);
        setScrollPos(null);
    };

    const [selectedStats, setSelectedStats] = useState<string[]>([
        // "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤–Ω—ã—Ö —Ä–∞—Å—Ç—É—â–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ 2 –≥–æ–¥–∞ + —Ç–µ–∫—É—â–∏–π, –†–û1 üìÖ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –ø–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤–Ω—ã—Ö —Ä–∞—Å—Ç—É—â–∏—Ö, –†–û1 üìÖ", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å, –†–û2 üìÖ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –†–û2 üìÖ"
    ]);

    const [blankRows, setBlankRows] = useState<{ officeID: number; blankRowsValues: string[][] }[]>([]);

    const [selectedStatsList, setSelectedStatsList] = useState<ISelectedStatsListItem[]>([]);
    //cash cells
    const [cacheStatsLogics, setCacheStstsLogic] = useState<Map<string, ILogicCell[]>>(loadedStatLogicsMap);

    //FUNCS
    const clearStates = () => {
        setIsSavedProtocol(false);
        setHeaders([]);
        setIsShowEditHeaders(false);
        setTables([]);
        setMembers([]);
        setInfo(INFO_INIT);
        setCharts([]);
        setProtocolSelectedId(0);
    };
    //members
    const onAddMember = () => {
        if (usersListRef.current === null) return;

        const selectedUserID = Number(usersListRef.current.value);

        if (selectedUserID) {
            if (members.some((member) => member.userId === selectedUserID)) {
                usersListRef.current.value = "0";
                toast.error(`${userByID(selectedUserID)?.name} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ !`);
                return;
            }

            setMembers((state) => [
                ...state,
                {
                    officeNumber: 0,
                    presence: 0,
                    userId: selectedUserID,
                },
            ]);
            usersListRef.current.value = "0";
        }
    };

    const onDelMember = () => {
        if (usersListRef.current === null) return;
        const selectedUserID = Number(usersListRef.current.value);
        if (selectedUserID) {
            if (!members.some((member) => member.userId === selectedUserID)) {
                usersListRef.current.value = "0";
                toast.error(`${userByID(selectedUserID)?.name} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö !`);
                return;
            }

            setMembers((state) => state.filter((member) => member.userId !== selectedUserID));
        }
    };
    //headers
    const onDelHeader = (id: string) => {
        setHeaders((state) => state.filter((header) => header.id !== id));
        //—É–¥–∞–ª—è–µ–º –ª–æ–≥–∏–∫—É —Å —è—á–µ–µ–∫ –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏ –ø–æ ID –∫–æ–ª–æ–Ω–∫–∏
        setTables((state) => state.map((table) => ({ ...table, stats: table.stats.map((stat) => ({ ...stat, logicStrArr: stat.logicStrArr.filter((logic) => logic.headerId !== id) })) })));
        removeHeaderFromCache(id); //—É–¥–∞–ª—è–µ–º —Å –∫—ç—à–∞
    };

    const onAddHeader = useCallback(() => {
        const newHeaderId = nanoid();
        setHeaders((state) => [
            ...state,
            {
                id: newHeaderId,
                title: "–ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞",
                color: "#6FD273",
            },
        ]);
        setTables((state) => state.map((table) => ({ ...table, stats: table.stats.map((stat) => ({ ...stat, logicStrArr: [...stat.logicStrArr, { headerId: newHeaderId, logicStr: "" }] })) })));
    }, [setHeaders, setTables]);

    const onHeaderMoveLeft = (headerIdx: number) => {
        if (headerIdx > 1) {
            setHeaders((state) => {
                const temp = [...state];
                temp.splice(headerIdx - 1, 2, temp[headerIdx], temp[headerIdx - 1]);

                return temp;
            });
        }
    };
    const onHeaderMoveRight = (headerIdx: number) => {
        if (headerIdx < headers.length - 1) {
            setHeaders((state) => {
                const temp = [...state];
                temp.splice(headerIdx, 2, temp[headerIdx + 1], temp[headerIdx]);

                return temp;
            });
        }
    };

    const headersToDefault = () => {
        if (confirm("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞?")) {
            setHeaders(defaultHeaders);

            //—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–∞–ø–∞
            // const obj = Object.fromEntries(loadedStatLogicsMap);
            //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ LS
            //localStorage.setItem("statLogics", JSON.stringify(obj));
            setCacheStstsLogic((state) => {
                const newCache = new Map(state);
                for (let [key, value] of newCache) {
                    newCache.set(
                        key,
                        value.filter((log) => log.headerId.includes("baseHeaderID"))
                    );
                }

                return newCache;
            });
        }
    };

    //tabels
    const onAddTable = (item: IDirectOffice) => {
        setTables((state) => [
            ...state,
            {
                id: nanoid(),
                officeID: item.id,
                description: "",
                blankRows: [],
                stats: [],
            },
        ]);
    };

    const addAllOffices = () => {
        fullOrgWithdata.forEach((office, officeIDx) => {
            setInfo({ ...INFO_INIT, protocol: protocolList.length + 1 });
            onAddTable(office);
            setMembers((state) => {
                return [
                    ...state,
                    {
                        officeNumber: officeIDx + 1,
                        presence: 0,
                        userId: office.leadership,
                    },
                ];
            });
        });
    };

    //SAVE SETTINGS ON SERVER
    const saveSettingsOnServer = useCallback(() => {
        console.log("SAVE SETTINGS ‚úÖ‚úÖ‚úÖ", headers);
        saveHeaders({ headers: JSON.stringify(headers) });
        saveLogic({ cacheStatsLogics: JSON.stringify(Object.fromEntries(cacheStatsLogics)) });
    }, [headers, cacheStatsLogics]);

    //SAVE PROTOCOL ON SERVER
    const saveDirectOnServer = useCallback(() => {
        saveDirect({
            columns: JSON.stringify(headers),
            cacheStatsLogics: JSON.stringify(Object.fromEntries(cacheStatsLogics)),
            info: JSON.stringify(info),
            members: JSON.stringify(members),
            tabels: JSON.stringify(tabels),
        }).then(() => setIsSavedProtocol(true));
    }, [headers, cacheStatsLogics, info, members, tabels]);

    //LS SAVE
    const cacheLogic = () => {
        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        //                         –ù–∞–¥–æ –æ—á–∏—â–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–∏–ª–∏ –∫—Ä–æ–º–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö

        //‚≠ê–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Map –≤ —Å—Ç—Ä–æ–∫—É, –µ–≥–æ –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç Object.fromEntries
        //‚≠ê–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Map —Å –æ–±—ä–µ–∫—Ç–∞ –µ–≥–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∏–≤–æ–º Object.entries

        tabels.forEach((table) => {
            table.stats.forEach((stat) => {
                const logicsArr = stat.logicStrArr.filter((logic) => logic.logicStr !== "");
                const statName = clearStatName(statNameById(stat.id));
                if (logicsArr.length)
                    if (!loadedStatLogicsMap.has(statName)) {
                        //—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
                        loadedStatLogicsMap.set(statName, logicsArr);
                    } else {
                        // —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        let cached = loadedStatLogicsMap.get(statName) as ILogicCell[];

                        //–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
                        cached = cached.map((cell) => {
                            //–∏—â–µ–º –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–≥–æ
                            const newLogicIdx = logicsArr.findIndex((newCell) => newCell.headerId === cell.headerId);
                            if (newLogicIdx >= 0) {
                                return logicsArr[newLogicIdx];
                            } else {
                                return cell;
                            }
                        });
                        //–∏—â–µ–º –Ω–æ–≤—ã–µ —è—á–µ–π–∫–∏
                        const newCells = logicsArr.filter((cell) => !cached.some((cach) => cach.headerId === cell.headerId));
                        //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                        loadedStatLogicsMap.set(statName, [...cached, ...newCells]);
                    }
            });
        });

        if (loadedStatLogicsMap.size) {
            //—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–∞–ø–∞
            const obj = Object.fromEntries(loadedStatLogicsMap);
            //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ LS
            // localStorage.setItem("statLogics", JSON.stringify(obj));

            // console.log("CACHE", Object.entries(obj));
            setCacheStstsLogic(loadedStatLogicsMap);
        }

        //new Map(Object.entries(obj))
    };

    const removeHeaderFromCache = (headerId: string) => {
        if (headerId.includes("baseHeaderID")) return; //–Ω–µ —É–¥–∞–ª—è–µ–º –±–∞–∑–∞–≤—ã–µ

        // for (let [key, value] of loadedStatLogicsMap) {
        //     loadedStatLogicsMap.set(
        //         key,
        //         value.filter((log) => log.headerId !== headerId)
        //     );
        // }

        //setCacheStstsLogic(loadedStatLogicsMap);

        setCacheStstsLogic((state) => {
            const newCache = new Map(state);
            for (let [key, value] of newCache) {
                newCache.set(
                    key,
                    value.filter((log) => log.headerId !== headerId)
                );
            }
            return newCache;
        });

        //—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–∞–ø–∞
        // const obj = Object.fromEntries(loadedStatLogicsMap);
        //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ LS
        //localStorage.setItem("statLogics", JSON.stringify(obj));
    };

    //TABLE HTML
    const mainTable = useMemo(() => {
        //console.log(tabels);
        return [
            <thead key={Math.random()}>
                <tr>
                    <th colSpan={headers.length}>–ì–ª–∞–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –Ω–∏–º</th>
                </tr>
            </thead>,
            tabels.map((table) => {
                return <DirectTable key={table.id} headers={headers} table={table} setTables={setTables} fullOrgWithdata={fullOrgWithdata} setCharts={setCharts} charts={charts} saveScroll={saveScroll} cacheStatsLogics={cacheStatsLogics} cacheLogic={cacheLogic} loaded={mainStatus === "archive"} selectedStats={selectedStats} setSelectedStats={setSelectedStats} blankRows={blankRows} />;
            }),
        ];
    }, [tabels, headers, charts, selectedStats, blankRows]);

    // HEADERS EDIT BLOCK -- HTML
    const headersEditBlock = useMemo(() => {
        return (
            <div className={styles.headersEditBlock}>
                <div className={styles.headersEditTitle}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫</div>
                <div className={styles.headersEditClose}>
                    <XCircleIcon width={30} onClick={() => setIsShowEditHeaders(false)} stroke="white" />
                </div>
                {headers.map((header, headerIdx) => {
                    return (
                        <div key={header.id + headerIdx} className={styles.headersItem} onClick={() => headerIdx && setSelectedHeader(headerIdx)} style={{ background: header.color }}>
                            <div className={styles.itemText}> {header.title}</div>
                            {!!headerIdx && (
                                <div
                                    className={styles.itemDel}
                                    onClick={(event) => {
                                        event.stopPropagation();
                                        confirm(`–£–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É "${header.title}" —Å–æ –≤—Å–µ–º–∏ –ª–æ–≥–∏–∫–∞–º–∏ —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü ?`) && onDelHeader(header.id);
                                    }}
                                >
                                    <XCircleIcon width={20} />
                                </div>
                            )}
                            {!!headerIdx && (
                                <div className={styles.arrowsBlock}>
                                    <ArrowLeftCircleIcon
                                        width={20}
                                        onClick={(event) => {
                                            event.stopPropagation();
                                            onHeaderMoveLeft(headerIdx);
                                        }}
                                    />
                                    <ArrowRightCircleIcon
                                        width={20}
                                        onClick={(event) => {
                                            event.stopPropagation();
                                            onHeaderMoveRight(headerIdx);
                                        }}
                                    />
                                </div>
                            )}
                        </div>
                    );
                })}
                <div className={styles.addBtn} onClick={onAddHeader}>
                    <span>–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É</span>
                    <ViewColumnsIcon width={20} />
                </div>

                <div className={styles.toDefault} onClick={() => headersToDefault()}>
                    —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö
                </div>
            </div>
        );
    }, [headers, tabels]);

    const headerModal = useMemo(() => {
        if (!!selectedHeader && headers[selectedHeader])
            return (
                <Modal fullWidth closeModalFunc={() => setSelectedHeader(0)} scrollOnTop={false}>
                    <div className={styles.headerModalBlock}>
                        <div className={styles.field}>
                            <span>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏</span>
                            <input
                                className={styles.name}
                                value={headers[selectedHeader].title}
                                onChange={(event) =>
                                    setHeaders((state) => {
                                        const temp = [...state];
                                        temp[selectedHeader].title = event.target.value;
                                        return temp;
                                    })
                                }
                            />
                        </div>
                        <div className={styles.field}>
                            <span>–¶–≤–µ—Ç –∫–æ–ª–æ–Ω–∫–∏</span>
                            <input
                                className={styles.color}
                                type="color"
                                value={rgbToHex(headers[selectedHeader].color)}
                                onChange={(event) => {
                                    setHeaders((state) => {
                                        const temp = [...state];
                                        temp[selectedHeader].color = hexToRgba(event.target.value, 1);
                                        return temp;
                                    });
                                }}
                            />
                            <div
                                className={styles.dropBtn}
                                onClick={(event) => {
                                    setHeaders((state) => {
                                        const temp = [...state];
                                        temp[selectedHeader].color = hexToRgba("#6FD273", 1);
                                        return temp;
                                    });
                                }}
                            >
                                –°–±—Ä–æ—Å–∏—Ç—å —Ü–≤–µ—Ç –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
                            </div>
                        </div>
                        <div className={styles.okBtn} onClick={() => setSelectedHeader(0)}>
                            Ok
                        </div>
                    </div>
                </Modal>
            );
    }, [headers, selectedHeader, tabels]);

    const topInfoBlock = useMemo(() => {
        if (!!tabels.length) {
            return (
                <div className={`${styles.topInfoBlock} ${mainStyle === "row" ? styles.topInfoBlockRow : ""}`}>
                    <div className={styles.infoBlock}>
                        <div className={styles.field}>
                            <div className={styles.title}>‚Ññ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</div>
                            <div className={styles.title}>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è </div>
                            <div className={styles.title}>–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –†–° </div>
                            <div className={styles.title} style={{ background: memberPresenceCol[info.lastProtocol] }}>
                                –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–æ—à–ª–æ–≥–æ –†–°
                            </div>
                            <div className={styles.title} style={{ background: memberPresenceCol[info.strategy] }}>
                                –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–∏–ª–∏–∞–ª–∞
                            </div>
                            <div className={styles.title} style={{ background: memberPresenceCol[info.directFP] }}>
                                –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –§–ü
                            </div>
                            <div className={styles.title} style={{ background: memberPresenceCol[info.docs] }}>
                                –ü–µ—Ä–µ—á–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤{" "}
                            </div>
                        </div>
                        <div className={styles.values}>
                            <div className={styles.value}>
                                <input type="number" value={info.protocol} onChange={(event) => setInfo((state) => ({ ...state, protocol: Number(event.target.value) }))} disabled />
                            </div>
                            <div className={styles.value}>
                                {/* {info.date} */}

                                <input type="date" value={timeNumberToString(info.date)} onChange={(event) => setInfo((state) => ({ ...state, date: timeStrToNumber(event.target.value) }))} disabled={mainStatus === "archive"} />
                            </div>
                            <div className={styles.value}>{userByID(info.chairmanId)?.name}</div>
                            <div className={styles.value}>
                                <select value={info.lastProtocol} onChange={(event) => setInfo((state) => ({ ...state, lastProtocol: Number(event.target.value) }))} disabled={mainStatus === "archive"}>
                                    <option value={0}>–Ω–µ—Ç</option>
                                    <option value={1}>–µ—Å—Ç—å</option>
                                </select>
                            </div>
                            <div className={styles.value}>
                                <select value={info.strategy} onChange={(event) => setInfo((state) => ({ ...state, strategy: Number(event.target.value) }))} disabled={mainStatus === "archive"}>
                                    <option value={0}>–Ω–µ—Ç</option>
                                    <option value={1}>–µ—Å—Ç—å</option>
                                </select>
                            </div>
                            <div className={styles.value}>
                                <select value={info.directFP} onChange={(event) => setInfo((state) => ({ ...state, directFP: Number(event.target.value) }))} disabled={mainStatus === "archive"}>
                                    <option value={0}>–Ω–µ—Ç</option>
                                    <option value={1}>–µ—Å—Ç—å</option>
                                </select>
                            </div>
                            <div className={styles.value}>
                                <select value={info.docs} onChange={(event) => setInfo((state) => ({ ...state, docs: Number(event.target.value) }))} disabled={mainStatus === "archive"}>
                                    <option value={0}>–Ω–µ—Ç</option>
                                    <option value={1}>–µ—Å—Ç—å</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div className={styles.membersBlock}>
                        <div className={styles.membersTitle}>–ß–ª–µ–Ω—ã –†–°</div>
                        <table>
                            <thead>
                                <tr>
                                    <th>–û—Ç–¥–µ–ª–µ–Ω–∏–µ</th>
                                    <th>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</th>
                                    <th>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ</th>
                                </tr>
                            </thead>
                            <tbody>
                                {members.map((member, memberIdx) => (
                                    <tr className={styles.memberItem} key={member.userId + "_userList"}>
                                        {member.officeNumber ? <td>{member.officeNumber} –æ—Ç–¥–µ–ª–µ–Ω–∏–µ</td> : <td style={{ textAlign: "center" }}>—É—á–∞—Å—Ç–Ω–∏–∫</td>}
                                        <td style={{ background: memberPresenceCol[member.presence] }}>{userByID(member.userId)?.name}</td>
                                        <td>
                                            <select
                                                disabled={mainStatus === "archive"}
                                                value={Number(member.presence)}
                                                onChange={(event) =>
                                                    setMembers((state) => {
                                                        const temp = [...state];
                                                        temp[memberIdx].presence = Number(event.target.value);
                                                        return temp;
                                                    })
                                                }
                                            >
                                                <option value={0}>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</option>
                                                <option value={1}>–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç</option>
                                            </select>
                                        </td>
                                    </tr>
                                ))}
                                {mainStatus === "new" && (
                                    <tr>
                                        <td style={{ textAlign: "center", cursor: "pointer", display: "flex", justifyContent: "space-between" }}>
                                            <UserPlusIcon width={24} onClick={onAddMember} />
                                            <UserMinusIcon width={24} onClick={onDelMember} />
                                        </td>
                                        <td colSpan={2} style={{ textAlign: "center" }}>
                                            <select ref={usersListRef}>
                                                <option value={0} style={{ textAlign: "center" }}>
                                                    {" "}
                                                    –≤—ã–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                                                </option>
                                                {users.map((user) => (
                                                    <option key={user.id + "_usersList"} value={user.id}>
                                                        {user.name}
                                                    </option>
                                                ))}
                                            </select>
                                        </td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>
            );
        }
    }, [members, info, mainStatus]);

    //PROTOCOL LIST SELECT-HTML
    const protocolListSelectHtml = useMemo(() => {
        return (
            <select className={styles.loadProtocolSelect} value={protocolSelectedId} onChange={(event) => setProtocolSelectedId(Number(event.target.value))}>
                <option value={0}> –≤—ã–±–æ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</option>
                {protocolList
                    .filter((item) => (isAdmin ? true : item.members.includes(user.userId)))
                    .map((protocolItem) => (
                        <option key={protocolItem.createdAt + "_protocolListItem"} value={protocolItem.id}>
                            –ü—Ä–æ—Ç–æ–∫–æ–ª ‚Ññ :<b> {protocolItem.protocolNumber}</b> üìÜ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è : {new Date(protocolItem.createdAt).toLocaleDateString()}
                        </option>
                    ))}
            </select>
        );
    }, [protocolList, protocolSelectedId]);

    //MAIN STATUS HTML
    const mainStatusShooceHtml = useMemo(() => {
        return (
            <div className={styles.mainShooceBlock}>
                {isAdmin && (
                    <div className={`${styles.shooceItem} ${mainStatus === "new" ? styles.selected : ""} noselect`} onClick={() => setMainStatus((state) => (state === "new" ? null : "new"))}>
                        <div>–ù–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª</div>
                        <BuildingOffice2Icon width={25} />
                    </div>
                )}
                <div className={`${styles.shooceItem} ${mainStatus === "archive" ? styles.selected : ""} noselect`} onClick={() => setMainStatus((state) => (state === "archive" ? null : "archive"))}>
                    <div>–ê—Ä—Ö–∏–≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤</div>
                    <CloudArrowDownIcon width={25} />
                </div>
            </div>
        );
    }, [mainStatus]);

    //SELECTED STATS LIST
    const saveListInputRef = useRef<ElementRef<"input">>(null);
    const [selectedListIdx, setSelectedListIdx] = useState(0);
    const onDeleteList = useCallback(() => {
        if (!confirm("–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç ?")) return;
        const delListIdx = selectedStatsList[selectedListIdx - 1].id as number;
        console.log(delListIdx, selectedStatsList[selectedListIdx - 1]);
        if (selectedListIdx > 0)
            deleteListById({ id: delListIdx, setSelectedStatsList }).then(() => {
                setSelectedListIdx(0);
                setTables((state) => state.map((table) => ({ ...table, stats: [] })));
            });
        else toast.error("–õ–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω");
    }, [selectedListIdx, selectedStatsList]);

    // TODO  SELECTED LIST

    const onSaveList = () => {
        const blankRows = tabels.map((table) => ({ officeID: table.officeID, blankRowsValues: table.blankRows.map((blankRow) => blankRow.values) }));
        console.log(blankRows);
        saveSelectedList({ name: saveListInputRef.current?.value || `–ª–∏—Å—Ç –≤—ã–±–æ—Ä–∞ ‚Ññ ${selectedStatsList.length + 1} : ` + new Date().toLocaleDateString(), selectedStats, setSelectedStatsList, blankRows }).then(() => (saveListInputRef.current!.value = ""));
    };

    const selectedStatsListHtml = useMemo(() => {
        if (!!selectedStatsList.length || tabels.some((table) => !!table.stats.length))
            return (
                <div className={styles.loadListBlock}>
                    {process.env.NODE_ENV !== "production" && (
                        <>
                            <button onClick={() => console.log(selectedStatsList)}>check list</button>
                            <button onClick={() => console.log(blankRows)}>check blank rows</button>
                        </>
                    )}
                    <div className={styles.title}>
                        <div>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫</div>
                        <Cog6ToothIcon width={30} color="white" />
                    </div>
                    {!!selectedStatsList.length && (
                        <div className={styles.selectBlock}>
                            <CloudArrowDownIcon width={35} color="white" />
                            <select
                                value={selectedListIdx}
                                onChange={(event) => {
                                    const selectIdx = Number(event.target.value);
                                    setSelectedListIdx(selectIdx);
                                    if (selectIdx > 0) {
                                        setSelectedStats(selectedStatsList[selectIdx - 1].selectedStats);
                                        setBlankRows(selectedStatsList[selectIdx - 1].blankRows);
                                    } else {
                                        setSelectedStats([]);
                                        setBlankRows([]);
                                        setTables((state) => state.map((table) => ({ ...table, stats: [], blankRows: [] })));
                                    }
                                }}
                            >
                                <option value={0}> –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ ?</option>
                                {selectedStatsList.map((selStats, idx) => (
                                    <option value={idx + 1}>{selStats.name}</option>
                                ))}
                            </select>
                            {!!selectedListIdx && (
                                <div onClick={onDeleteList} className={styles.delListBtn}>
                                    <span>–£–¥–∞–ª–∏—Ç—å –ª–∏—Å—Ç</span>
                                    <TrashIcon width={25} color="white" />
                                </div>
                            )}
                        </div>
                    )}

                    {tabels.some((table) => !!table.stats.length) && (
                        <div className={styles.controlBlock}>
                            <div
                                className={styles.dropStatsBtn}
                                onClick={() => {
                                    setTables((state) => state.map((table) => ({ ...table, stats: [] })));
                                    setSelectedListIdx(0);
                                }}
                            >
                                <span> –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</span>
                                <XMarkIcon width={25} />
                            </div>
                            <div className={styles.saveBlock}>
                                <input type="text" ref={saveListInputRef} placeholder="–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ ?" />
                                <div className={styles.saveBtn} onClick={onSaveList}>
                                    <span> C–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫</span>
                                    <CloudArrowUpIcon width={25} color="white" />
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            );
    }, [selectedStatsList, setSelectedStatsList, selectedStats, selectedListIdx, tabels, blankRows]);

    //EFFECTS

    //SCROLL LOOK
    useEffect(() => {
        if (scrollPos !== null) {
            const scrollLook = () => {
                scrollPos > window.scrollY && setScrollPos(null);
            };
            document.addEventListener("scroll", scrollLook);

            return () => {
                document.removeEventListener("scroll", scrollLook);
            };
        }
    }, [scrollPos]);

    //–ó–ê–ì–†–£–ñ–ê–ï–ú –ü–û –í–´–ë–û–†–£ –ü–†–û–¢–û–ö–û–õ
    useEffect(() => {
        if (protocolSelectedId) {
            getProtocolById({ id: protocolSelectedId, setCacheStstsLogic, setHeaders, setInfo, setMembers, setTables });
        }
    }, [protocolSelectedId]);

    //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

    useEffect(() => {
        if (mainStatus !== null) {
            {
                clearStates();
                // process.nextTick(() => {
                if (mainStatus === "new") {
                    Promise.all([getDirectSettings({ setHeaders, setCacheStstsLogic, defaultHeaders }), getProtocolList({ setProtocolList })]).then(() => {
                        addAllOffices();
                    });
                    // getDirectSettings({ setHeaders, setCacheStstsLogic, defaultHeaders }).then(() => addAllOffices()); // –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ö—É–∫–∞
                    // getProtocolList({ setProtocolList });
                }

                if (mainStatus === "archive") {
                    getProtocolList({ setProtocolList });
                }
                // });
            }
        } else {
            clearStates();
            getProtocolList({ setProtocolList });
        }
    }, [mainStatus]);

    //ON MOUNT‚≠ê

    useEffect(() => {
        getSelectedLists({ setSelectedStatsList });
    }, []);

    //EXCEL SAVE
    interface ITableParcedRow {
        type: string;
        cells: string[];
    }
    const onSaveExcel = () => {
        const fileName = `–ü—Ä–æ—Ç–æ–∫–æ–ª ‚Ññ ${info.protocol} üìÜ${new Date(info.date).toLocaleDateString()}`;
        const workbook = new ExelJs.Workbook();
        const sheet = workbook.addWorksheet(fileName);

        const table = document.querySelector("#mainTable");
        if (!table) return;

        // TODO info && members - —Å–æ–∑–¥–∞—Ç—å —Ä—è–¥—ã —à–∞–ø–∫–º
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã

        // ! –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã - –≤—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞
        table.querySelectorAll("th");
        // console.log(table.children);
        const parsedArr: ITableParcedRow[] = [];
        for (let child of table.children) {
            if (child.nodeName === "THEAD") {
                const row = child.querySelector("tr");
                //console.log(row);
                const cells = [...row!.querySelectorAll("#head")].map((el) => el.innerHTML);
                parsedArr.push({
                    type: "head",
                    cells,
                });
                if (!sheet.columns?.length) {
                    sheet.columns = cells.map((value, idx) => ({
                        header: value,
                        width: value.length + 10,

                        key: idx + "_column",
                    }));
                    const curRow = sheet.getRow(1);
                    curRow.fill = {
                        type: "pattern",
                        pattern: "solid",
                        fgColor: { argb: "3DA041" },
                    };
                    curRow.font = {
                        name: "Arial",
                        family: 4,
                        size: 11,
                        bold: true,
                        color: { argb: "FFFFFFFF" },
                    };
                    curRow.height = 35;
                } else {
                    const curRow = sheet.addRow(cells.reduce((acc, value, idx) => ({ ...acc, [idx + "_column"]: value }), {}));
                    curRow.alignment = { vertical: "middle", horizontal: "center" };
                    curRow.fill = {
                        type: "pattern",
                        pattern: "solid",
                        fgColor: { argb: "3DA041" },
                    };
                    curRow.font = {
                        name: "Arial",
                        family: 4,
                        size: 11,
                        bold: true,
                        color: { argb: "FFFFFFFF" },
                    };
                    curRow.height = 35;
                }
            }
            if (child.nodeName === "TBODY") {
                const rows = [...child.querySelectorAll("tr")];
                rows.forEach((row) => {
                    const cells = [...row.querySelectorAll("#cell-value")].map((el) => el.innerHTML);
                    parsedArr.push({
                        type: "row",
                        cells,
                    });

                    const curRow = sheet.addRow(cells.reduce((acc, value, idx) => ({ ...acc, [idx + "_column"]: value }), {}));
                    curRow.alignment = { vertical: "middle", horizontal: "center" };
                    curRow.height = 35;
                });
            }
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞ wrapText –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –Ω–∞ true
        sheet.eachRow((row) => {
            row.eachCell((cell) => {
                cell.alignment = {
                    wrapText: true,
                    horizontal: "centerContinuous",
                    vertical: "middle",
                };
            });
        });

        console.log(parsedArr.filter((row) => !!row.cells.length));
        //--------------- PARSE TABLE

        //IMG-----------------
        const width = 700;
        const height = 370;
        const canvasArr = [...document.querySelectorAll("canvas")];
        canvasArr.forEach((canvas, idx) => {
            // const ctx = canvas.getContext("2d");

            // // –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é getImageData
            // const imgData = ctx!.getImageData(0, 0, canvas.width, canvas.height);
            // const data = imgData.data;

            // // –ü—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –¥–∞–Ω–Ω—ã–º –ø–∏–∫—Å–µ–ª–µ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ –≤ –±–µ–ª—ã–π —Ü–≤–µ—Ç
            // for (let i = 0; i < data.length; i += 4) {
            //     if (data[i + 3] < 255) {
            //         data[i] = 255; // –ö—Ä–∞—Å–Ω—ã–π
            //         data[i + 1] = 255; // –ó–µ–ª–µ–Ω—ã–π
            //         data[i + 2] = 255; // –°–∏–Ω–∏–π
            //         data[i + 3] = 255; // –ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª (–Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
            //     }
            // }

            // // –ü–æ–º–µ—Å—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –∫–∞–Ω–≤–∞—Å
            // ctx!.putImageData(imgData, 0, 0);
            sheet.addImage(
                workbook.addImage({
                    base64: canvas.toDataURL("image/jpg", 1),
                    extension: "jpeg",
                }),
                {
                    tl: { col: idx % 2 ? 3 : 0, row: parsedArr.length + 19 * (Math.ceil((idx + 1) / 2) - 1) },
                    ext: { width, height },
                }
            );
        });
        //------------------IMG

        workbook.xlsx.writeBuffer().then((data) => {
            const blob = new Blob([data], {
                type: "application/vnd.openxmlformats-officedocument.spreadsheet.sheet",
            });
            const url = window.URL.createObjectURL(blob);
            //console.log("URL", url);
            const a = document.createElement("a");
            a.href = url;
            a.download = fileName + ".xlsx";
            a.click();
            window.URL.revokeObjectURL(url);
        });
    };

    return (
        <div className={styles.directWrap}>
            {process.env.NODE_ENV === "development" && (
                <div>
                    <button
                        onClick={() => {
                            console.log({ headers, tabels, charts });
                        }}
                    >
                        check
                    </button>
                    <button onClick={cacheLogic}>save cache</button>
                    <button onClick={() => console.log(cacheStatsLogics)}>show</button>
                    <button onClick={() => removeHeaderFromCache("o5yIJ6I6P3uJ8ggpZbNx5")}>remove</button>
                    <hr />
                    <button onClick={() => console.log(tabels)}>show tabels</button>
                    <button onClick={() => console.log(protocolList)}>show protocols list</button>
                    <hr />
                    <button onClick={() => console.log(members)}>members show</button>
                    <hr />
                    <button onClick={() => console.log(selectedStats)}>selected stats show</button>
                </div>
            )}
            {mainStatusShooceHtml}
            {mainStatus === "new" && selectedStatsListHtml}
            {mainStatus === "archive" && protocolListSelectHtml}
            {topInfoBlock}
            <Mission />

            {headerModal}

            {mainStatus === "new" && (
                <>
                    <div className={styles.topBtnsBlock}>
                        {!isShowEditHeaders && (
                            <div className={styles.headersSettingsBtn} onClick={() => setIsShowEditHeaders((state) => !state)} style={{ background: "rgb(111, 210, 115)" }}>
                                <div>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫</div>
                                <Cog6ToothIcon width={20} />
                            </div>
                        )}
                        <div className={styles.headersSettingsBtn} onClick={saveSettingsOnServer} style={{ background: "#05C1DA", position: "absolute", right: 20 }}>
                            <div>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏ —è—á–µ–µ–∫</div>
                            <ArrowUpTrayIcon width={20} />
                        </div>
                    </div>
                    {isShowEditHeaders && headersEditBlock}
                </>
            )}

            <table className={styles.mainTable} id="mainTable">
                {!!tabels.length && mainTable}
            </table>
            {scrollPos !== null && (
                <div className={styles.scrollBtn} onClick={goToSavedScroll}>
                    <BarsArrowUpIcon width={30} />
                    <div className={styles.text}>–ü–æ–¥–Ω—è—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ</div>
                </div>
            )}

            <Charts charts={charts} />
            {mainStatus == "archive" && isAdmin && !!protocolSelectedId && (
                <>
                    <div className={styles.headersSettingsBtn} onClick={() => confirm("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞ ?") && deleteProtocolById({ id: protocolSelectedId, afterFunc: clearStates }).then(() => setMainStatus(null))} style={{ background: "tomato", color: "white" }}>
                        <div>–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª</div>
                        <TrashIcon width={20} />
                    </div>
                </>
            )}
            {mainStatus === "new" && !isSavedProtocol && tabels.some((table) => table.stats.length) && (
                <div className={styles.headersSettingsBtn} onClick={saveDirectOnServer} style={{ background: "#2196F3", color: "white", position: "fixed", right: 10, bottom: 10 }}>
                    <div>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª</div>
                    <CloudArrowUpIcon width={20} />
                </div>
            )}
            {tabels.some((table) => table.stats.length) && (
                <div className={styles.exelBtn} onClick={onSaveExcel}>
                    <span>
                        C–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ <b>Excel</b>
                    </span>
                    <DocumentArrowDownIcon width={20} />
                </div>
            )}
        </div>
    );
}
